@attribute [StreamRendering]
@if (TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination pagination-primary">

            @if (CurrentPageNumber > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@GetUrl(1)">
                        <span aria-hidden="true"><i class="fa-solid fa-chevron-left"></i></span>
                    </a>
                </li>
            }

            @*  @if (StartPage != MaxPage)
             { *@
                @for (int i = 0; i <= 5; i++)
                {
                    string subClass = CurrentPageNumber == i ? "active" : string.Empty;

                    <li class="page-item @subClass"><a class="page-link"  @onclick="() => PageChanged(i)">  @i </a></li>
                }
             @* } *@

            @if (CurrentPageNumber < TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@GetUrl(TotalPages)">
                        <span aria-hidden="true"><i class="fa-solid fa-chevron-right"></i></span>
                    </a>
                </li>
            }
        </ul>
    </nav>
}

@code {
    [Parameter]
    [EditorRequired]
    public string NavUrl { get; set; } = String.Empty;
    [Parameter]
    [EditorRequired]
    public int CurrentPageNumber { get; set; } = 1;
    [Parameter]
    [EditorRequired]
    public int ItemsPerPage { get; set; } = 30;
    [Parameter]
    [EditorRequired]
    public int TotalItems { get; set; }

    public int TotalPages
    {
        get
        {
            if (TotalItems == 0 || ItemsPerPage == 0)
            {
                return 1;
            }

            return (int)Math.Ceiling((double)TotalItems / (double)ItemsPerPage);
        }
    }

    public int StartPage
    {
        get
        {
            int startPage = CurrentPageNumber - 2;
            if (startPage < 1)
            {
                startPage = 1;
            }

            return startPage;
        }
    }

    public int MaxPage
    {
        get
        {
            int maxPage = StartPage + 4;
            if (maxPage > TotalPages)
            {
                maxPage = TotalPages;
            }

            return maxPage;
        }
    }

    public string GetUrl(int seite) => $"{NavUrl}{seite}";
    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    // Các thuộc tính khác

    private async Task PageChanged(int newPageNumber)
    {
        // Gọi sự kiện để thông báo về sự thay đổi trang và nhận kết quả từ component cha
        await OnPageChanged.InvokeAsync(newPageNumber);
    }
}